esphome:
  name: $device_name
  platform: ESP8266
  board: esp01_1m
  #断电记忆，恢复上次的状态
  esp8266_restore_from_flash: yes
#----------------------------------------------------
  #指定编译临时文件存放位置
  build_path: build/$device_name
#----------------------------------------------------

#------- 一些自定义的配置，一般情况下只需要改这下面的内容 -------

substitutions:
  config_version: 'v2019.12.26.001'
  #设备名称（多个dc1改成不一样的，API接入和ESPHOME容器会识别这个作为名称显示）
  device_name: dc101
  #如果SSID是隐藏的，设置为true
  wifi_fast_connect: 'false'
  #WiFi离线多久后重启设备，秒s/分钟min/小时h，不需要此功能设置为0s，建议设置0s，防止异常重启，或者设置的大一些
  wifi_reboot_timeout: 0s
  #与API服务端失去连接多久后重启设备，秒s/分钟min/小时h，不需要此功能设置为0s，建议设置0s，防止异常重启，或者设置的大一些
  api_reboot_timeout: 0s
  #电量统计的数据刷新时间（内部刷新时间，非上报周期），秒s/分钟min/小时h
  cse7766_update_interval: 1s

#------- WIFI配置 -------
wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password
#----------需要设置静态地址的改下面的配置------------
#  manual_ip:
#    static_ip: 192.168.178.230
#    gateway: 192.168.178.1
#    subnet: 255.255.255.0
#    dns1: 1.1.1.1
#    dns2: 1.2.2.1
#--------------------------------------------------
  domain: .local
  reboot_timeout: $wifi_reboot_timeout
  power_save_mode: none
  fast_connect: $wifi_fast_connect
  #需要修改名字的时候，启用，OTA后禁用
  #use_address: ota.local
  
#------- WIFI AP配置 -------
  ap:
    ssid: $device_name
    password: "1234567890"
#对应的管理IP地址为192.168.4.1
captive_portal:

#---------不使用api与设备连接的话删除api配置---------
api:
  reboot_timeout: $api_reboot_timeout
#----------------------------------------------------

#------- OTA 空中升级配置 -------
ota:
  safe_mode: true
  password: !secret ota_password
#  port: 3286

#------- WEB后台，不建议使用 -------
#web_server:
#  port: 80
#  css_url: https://esphome.io/_static/webserver-v1.min.css
#  js_url: https://esphome.io/_static/webserver-v1.min.js
#----------------------------------------------------

#------- 深度休眠配置，一般情况下不建议使用，休眠后将无法远程控制设置 -------
#deep_sleep:
  #唤醒时间
#  run_duration: 50s
  #休眠时间
#  sleep_duration: 10min
#----------------------------------------------------

#------- 接入CAT9554 IO扩展芯片 -------
i2c:
  sda: GPIO3
  scl: GPIO12
  scan: false
  #frequency: 20kHz

#------- 接入CAT9554的扩展IO -------
cat9554:
  id: cat9554_hub
  #address: 0x20
  irq_pin: GPIO4

#------- 接入CSE7766电量传感器 -------
uart:
  rx_pin: GPIO13
  baud_rate: 4800

#------- 是否开启DEBUG模式，logger的level需至少设置为DEBUG -------
debug:

#-------打印log设置，注意实际输出端口为主板上面的log_tx，而不是刷机用到的tx-------
logger:
  #不同的log等级看到的信息详细程度不一样，信息量从少到多依次为
  # NONE、ERROR、WARN、INFO、DEBUG、VERBOSE、VERY_VERBOSE
  level: INFO
  #设置为0关闭通过UART的log输出
  baud_rate: 0
  #通过TTL看log信息，取消注释下面这行，读取接口为RX1，具体见模组接口说明图
#  hardware_uart: UART1

sensor:
  - platform: cse7766
    voltage:
      name: "${device_name} voltage"
    current:
      name: "${device_name} current"
    power:
      name: "${device_name} power"
    update_interval: $cse7766_update_interval
  - platform: uptime
    name: "${device_name} uptime"
  - platform: wifi_signal
    name: "${device_name} wifi_signal"

binary_sensor:
  - platform: status
    #设备状态
    name: "${device_name} status"
    #是否对外隐藏（true/false）
    internal: false
  - platform: gpio
    #第一个按钮(内部引用，对外隐藏)
    name: "${device_name} key1"
    #是否对外隐藏（true/false）
    internal: true
    pin:
      cat9554: cat9554_hub
      # Use pin number 0
      number: 0
      mode: INPUT
    filters:
      - invert:
      - delayed_on: 50ms
      - delayed_off: 50ms
    on_click:
      - min_length: 50ms
        max_length: 500ms
        then:
          - switch.toggle: switch1
  - platform: gpio
    #第二个按钮(内部引用，对外隐藏)
    name: "${device_name} key2"
    #是否对外隐藏（true/false）
    internal: true
    pin:
      cat9554: cat9554_hub
      # Use pin number 1
      number: 1
      mode: INPUT
    filters:
      - invert:
      - delayed_on: 50ms
      - delayed_off: 50ms
    on_click:
      - min_length: 50ms
        max_length: 500ms
        then:
          - switch.toggle: switch2
  - platform: gpio
    #第三个按钮(内部引用，对外隐藏)
    name: "${device_name} key3"
    #是否对外隐藏（true/false）
    internal: true
    pin:
      cat9554: cat9554_hub
      # Use pin number 2
      number: 2
      mode: INPUT
    filters:
      - invert:
      - delayed_on: 50ms
      - delayed_off: 50ms
    on_click:
      - min_length: 50ms
        max_length: 500ms
        then:
          - switch.toggle: switch3
  - platform: gpio
    #总开关(内部引用，对外隐藏)
    name: "${device_name} key0"
    #是否对外隐藏（true/false）
    id: key0
    internal: true
    pin:
      number: GPIO16
      mode: INPUT_PULLDOWN_16
    filters:
      - invert:
      - delayed_on: 50ms
      - delayed_off: 50ms
    on_click:
      - min_length: 50ms
        max_length: 500ms
        then:
          - switch.toggle: switch0
  #影子
  - platform: template
    name: "shadow1"
    id: shadow1
    internal: true
  - platform: template
    name: "shadow2"
    id: shadow2
    internal: true
  - platform: template
    name: "shadow3"
    id: shadow3
    internal: true
    
#WiFi状态灯
status_led:
  pin: GPIO0

text_sensor:
  - platform: template #配置文件版本
    name: "${device_name} Config Version"
    lambda: |-
      return {"${config_version}"};
  - platform: version
    #esphome版本
    name: "${device_name} esphome_version"
    icon: mdi:information-outline
  - platform: wifi_info
    ip_address:
      name: "${device_name} IP Address"
    ssid:
      name: "${device_name} Connected SSID"
#    bssid:
#      name: "${device_name} Connected BSSID"

output:
  - platform: gpio
    #继电器3(内部引用，对外隐藏)
    id: realy3
    #设置启动优先级到IO级，解决断电恢复被重置的问题
    setup_priority: 900
    pin:
      cat9554: cat9554_hub
      # Use pin number 4
      number: 4
      mode: OUTPUT
      inverted: false
  - platform: gpio
    #继电器2(内部引用，对外隐藏)
    id: realy2
    setup_priority: 900
    pin:
      cat9554: cat9554_hub
      # Use pin number 5
      number: 5
      mode: OUTPUT
      inverted: false
  - platform: gpio
    #继电器1(内部引用，对外隐藏)
    id: realy1
    setup_priority: 900
    pin:
      cat9554: cat9554_hub
      # Use pin number 6
      number: 6
      mode: OUTPUT
      inverted: false
  - platform: gpio
    #总继电器(内部引用，对外隐藏)
    id: realy0
    setup_priority: 900
    pin:
      cat9554: cat9554_hub
      # Use pin number 7
      number: 7
      mode: OUTPUT
      inverted: false

switch:
  - platform: output
    #总开关(显示为一个开关)
    name: "${device_name} switch0"
    output: realy0
    id: switch0
    on_turn_on:
      - switch.turn_on: LOGO_light
      - lambda: |-
          if (id(shadow1).state) {
            id(switch1).turn_on();
            id(shadow1).publish_state(false);
          }
          if (id(shadow2).state) {
            id(switch2).turn_on();
            id(shadow2).publish_state(false);
          }
          if (id(shadow3).state) {
            id(switch3).turn_on();
            id(shadow3).publish_state(false);
          }
    on_turn_off:
      - switch.turn_off: LOGO_light
      - lambda: |-
          if (id(switch1).state) {
            id(switch1).turn_off();
            id(shadow1).publish_state(true);
          }
          if (id(switch2).state) {
            id(switch2).turn_off();
            id(shadow2).publish_state(true);
          }
          if (id(switch3).state) {
            id(switch3).turn_off();
            id(shadow3).publish_state(true);
          }
  - platform: output
    #开关1(显示为一个开关)
    name: "${device_name} switch1"
    output: realy1
    id: switch1
    on_turn_on:
      - lambda: |-
          if (!id(switch0).state) {
            id(switch0).turn_on();
          }
  - platform: output
    #开关2(显示为一个开关)
    name: "${device_name} switch2"
    output: realy2
    id: switch2
    on_turn_on:
      - lambda: |-
          if (!id(switch0).state) {
            id(switch0).turn_on();
          }
  - platform: output
    #开关3(显示为一个开关)
    name: "${device_name} switch3"
    output: realy3
    id: switch3
    on_turn_on:
      - lambda: |-
          if (!id(switch0).state) {
            id(switch0).turn_on();
          }
  - platform: gpio
    pin: GPIO14
    #LOGO灯
    name: "${device_name} LOGO_light"
    id: LOGO_light
    internal: false
    inverted: true
